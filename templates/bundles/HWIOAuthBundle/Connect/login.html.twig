<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
</head>
<body>
    <style>
        html,
        body {
            height: 100%;
        }

        body {
            display: -ms-flexbox;
            display: flex;
            -ms-flex-align: center;
            align-items: center;
            padding-top: 40px;
            padding-bottom: 40px;
            background-color: #f5f5f5;
        }

        form {
            width: 100%;
            max-width: 330px;
            padding: 15px;
            margin: auto;
        }
        form .form-control {
            position: relative;
            box-sizing: border-box;
            height: auto;
            padding: 10px;
            font-size: 16px;
        }
        form .form-control:focus {
            z-index: 2;
        }
        form input[type="email"] {
            margin-bottom: -1px;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        form input[type="password"] {
            margin-bottom: 10px;
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }
    </style>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <div class="text-center" style="width: 100%">
        <h2>Login by form</h2>
        <form method="POST" action="{{ path('api_srp_login_prepare') }}" id="login">
            <div class="form-group">
                <label>
                    Email:
                    <input type="text" class="form-control" name="email">
                </label>
            </div>
            <div class="form-group">
                <label>
                    Password:
                    <input type="password" class="form-control" name="password">
                </label>
            </div>
            <div>
                <input type="submit" value="Login">
            </div>
        </form>

        {% if error is defined and error %}
            <span>{{ error }}</span>
        {% endif %}
        {% for owner in hwi_oauth_resource_owners() %}
            <p>or login by
                <a href="{{ hwi_oauth_login_url(owner) }}">{{ owner | trans({}, 'HWIOAuthBundle') }}</a>
            </p>
        {% endfor %}
    </div>
    <script type="text/javascript" src="{{ asset('static/js/axios.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('static/js/bigint.js') }}"></script>
    <script type="text/javascript" src="{{ asset('static/js/sha256.js') }}"></script>
    <script type="text/javascript" src="{{ asset('static/js/srp.js') }}"></script>
    <script type="text/javascript">
        var srp = new srp();

        function generateSession(data) {
            let secondMatcher = srp.generateM2(data.A, data.matcher, data.S);
            if (secondMatcher !== data.secondMatcher) {
                alert('error, server is compromised');
                return;
            }

            let sessionKey = srp.generateK(data.S);

            axios.post(
                '/srp_login_confirm', {
                    'clientSessionKey': sessionKey,
                    'email': data.email
                })
                .then(function (response) {
                    document.location.href = response.data.redirect;
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        function generateMatcher(data) {
            let x = srp.generateX(data.seed, data.email, data.password);
            let S = srp.generateS_Client(data.A, data.B, data.a, x);
            let M1 = srp.generateM1(data.A, data.B, S);

            data.S = S;
            data.matcher = M1;
            axios.post(
                '/api/auth/srpp/login2', {
                    'matcher': M1,
                    'email': data.email
                })
                .then(function (response) {
                    data.secondMatcher = response.data.secondMatcher;

                    generateSession(data);
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        document.getElementById('login').onsubmit = function () {
            console.log(this);
            console.log(this.action);
            let email = this.elements.item(0).value;
            let password = this.elements.item(1).value;

            let a = srp.getRandomSeed();
            let A = srp.generateA(a);

            axios.post(
                this.action, {
                    'email': this.elements.item(0).value,
                    'publicEphemeralValue': A,
                })
                .then(function (response) {

                    generateMatcher({
                        'email': email,
                        'password': password,
                        'A': A,
                        'a': a,
                        'B': response.data.publicEphemeralValue,
                        'seed': response.data.seed,
                    });
                })
                .catch(function (error) {
                    console.log(error);
                });

            return false;
        }
    </script>
</body>
</html>
