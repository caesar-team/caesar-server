imports:
    - { resource: events.yaml }
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Fixtures,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Strategy\ShareFactory\:
        resource: '../src/Strategy/ShareFactory'
        tags: ['app.share_factory']
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Security\FOSUBUserProvider:
        arguments:
            $properties: { google: googleId}

    App\Security\FrontendUriHandler:
        arguments:
            $validUriCollection: '%frontend_uris%'

    App\Controller\Admin\UserController:
        arguments:
            $userManager: '@fos_user.user_manager'

    App\Security\Voter\TwoFactorInProgressVoter:
        tags:
            - {name: security.voter, priority: 249 }

    App\Security\TwoFactor\GoogleAuthenticatorTwoFactorProvider:
        decorates: "scheb_two_factor.security.google.provider"
        arguments:
            $authenticator: "@scheb_two_factor.security.google_authenticator"
            $formRenderer: "@scheb_two_factor.security.google.form_renderer"

    mailer.rabbit_sender_adapter:
        class: App\Mailer\RabbitMqMailerAdapter
        arguments:
            $producer: '@old_sound_rabbit_mq.send_message_producer'

    App\Mailer\Sender\MailSender:
        arguments:
            - "@sylius.email_renderer.adapter"
            - "@sylius.email_sender.adapter"
            - "@sylius.email_provider"
            - "@sylius.mailer.default_settings_provider"

    Sylius\Component\Mailer\Sender\SenderInterface: '@App\Mailer\Sender\MailSender'

    Scheb\TwoFactorBundle\Security\TwoFactor\Provider\Google\GoogleAuthenticatorInterface: '@App\Security\TwoFactor\GoogleAuthenticator'

    App\Security\TwoFactor\GoogleAuthenticator:
        arguments:
            - "@scheb_two_factor.security.google"
            - "%scheb_two_factor.google.server_name%"
            - "%scheb_two_factor.google.issuer%"
    app.fos_user_mailer:
        class: App\Mailer\FosUserMailer
    app.send_message_consumer:
        class: App\Consumer\SendMessageConsumer
    App\Services\Messenger:
        arguments:
            $producer: '@old_sound_rabbit_mq.send_message_producer'

    FOS\UserBundle\Util\UserManipulator: ~

    app.services.security_message.client:
        class: App\Services\SecurityMessage\Client
        arguments:
            - '@snc_redis.default'

    App\Event\EventSubscriber\PromoteAdminSubscriber:
        arguments:
            $domainAdminEmail: '%env(resolve:DOMAIN_ADMIN_EMAIL)%'

    App\Notification\EmailSpoolMessenger:
        arguments:
            $producer: '@old_sound_rabbit_mq.send_message_producer'

    App\Notification\CompositeMessenger:
        arguments:
            - '@App\Notification\EmailSpoolMessenger'
            - '@App\Notification\DatabaseMessenger'

    App\Notification\MessengerInterface: '@App\Notification\CompositeMessenger'

    App\Notification\MessageGrouper\MessageGrouperInterface: '@App\Notification\MessageGrouper\CompositeMessageGrouper'

    App\Notification\MessageGrouper\CompositeMessageGrouper:
        arguments:
            - '@App\Notification\MessageGrouper\ShareMessageGrouper'
            - '@App\Notification\MessageGrouper\UpdateMessageGrouper'
            - '@App\Notification\MessageGrouper\ShareAndUpdateMessageGrouper'
            - '@App\Notification\MessageGrouper\NewRegistrationMessageGrouper'
            - '@App\Notification\MessageGrouper\DefaultMessageGrouper'

    App\Security\Authentication\TokenAuthenticator:
        arguments:
            $secret: '%env(JSON_RPC_SECRET)%'

    App\JsonRpc\MappingCollector:
        tags:
            - { name: 'json_rpc_http_server.method_aware' }

    App\JsonRpc\Method\ChangeUserKeysMethod:
        tags:
            - { method: 'changed-user-keys', name: 'json_rpc_http_server.jsonrpc_method' }

    App\JsonRpc\Method\UpdateUserKeysMethod:
        tags:
            - { method: 'updated-user-keys', name: 'json_rpc_http_server.jsonrpc_method' }